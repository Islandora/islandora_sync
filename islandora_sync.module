<?php

/**
 * @file
 * Sync data between Drupal and Fedora Commons.
 */

/**
 * Implements hook_menu().
 */
function islandora_sync_menu() {
  $items['admin/structure/types/manage/%/fedora'] = array(
    'title' => 'Fedora Commons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_bundle_settings_form', 4),
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/bundle_settings.form.inc',
  );
  $items['admin/structure/types/manage/%/fields/%/fedora'] = array(
    'title' => 'Fedora Commons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_field_settings_form', 4, 6),
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/field_settings.form.inc',
  );
  $items['admin/islandora/sync/xml-datastreams'] = array(
    'title' => 'XML Datastream Settings',
    'page callback' => 'islandora_sync_xml_ds_page',
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/xml_ds_settings.form.inc',
  );
  $items['admin/islandora/sync/xml-datastreams/add'] = array(
    'title' => 'Add XML Datastream Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_xml_ds_add'),
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/xml_ds_settings.form.inc',
  );
  $items['admin/islandora/sync/xml-datastreams/%/edit'] = array(
    'title' => 'Edit XML Datastream Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_xml_ds_edit', 4),
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/xml_ds_settings.form.inc',
  );
  $items['admin/islandora/sync/xml-datastreams/%/delete'] = array(
    'title' => 'Delete XML Datastream Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_sync_xml_ds_delete', 4),
    'access arguments' => array('islandora sync settings'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/xml_ds_settings.form.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_sync_permission() {
  return array(
    'islandora sync settings' => array(
      'title' => t('Administer Islandora sync settings'),
    ),
  );
}

/**
 * Implements hook_islandora_object_ingested().
 */
function islandora_sync_islandora_object_ingested(FedoraObject $object) {
  // How can/should multiple cmodels be handled?
  $bundle_info = db_query("SELECT * FROM {islandora_sync_type_settings} ists
    INNER JOIN {islandora_sync_type_cmodel} istc ON istc.bundle = ists.bundle
    WHERE istc.cmodel IN (:models)
    AND ists.sync_drupal = 1
    AND ists.sync_drupal_create", array(':models' => $object->models)
  )->fetchObject();

  if ($bundle_info->sync_drupal_timing == 'real_time') {
    module_load_include('inc', 'islandora_sync', 'includes/import_to_drupal');
    islandora_sync_import_from_pid($object->id, $bundle_info->bundle);
  }
  else {
    $queue['pid'] = $object->id;
    $queue['type'] = $bundle_info->entity_type;
    $queue['bundle'] = $bundle_info->bundle;
    $queue['operation'] = 'sync_drupal';
    drupal_write_record('islandora_sync_queue', $queue);
  }
}

/**
 * Implements hook_islandora_object_modified().
 */
function islandora_sync_islandora_object_modified(FedoraObject $object) {
  islandora_sync_update_from_fedora($object);
}

/**
 * Implements hook_islandora_datatastream_modified().
 */
function islandora_sync_islandora_datastream_modified(FedoraObject $object, FedoraDatastream $datastream) {
  // @TODO: should send dsid to update, limit fields that are updated
  islandora_sync_update_from_fedora($object);
}

function islandora_sync_update_from_fedora(FedoraObject $object) {
  $bundle_info = db_query("SELECT * FROM {islandora_sync_type_settings} ists
    INNER JOIN {islandora_sync_type_cmodel} istc ON istc.bundle = ists.bundle
    WHERE istc.cmodel IN (:models)
    AND ists.sync_drupal = 1
    AND ists.sync_drupal_update", array(':models' => $object->models)
  )->fetchObject();

  $nid = db_query("SELECT entity_id FROM {islandora_sync_map} WHERE pid = :pid", array(':pid' => $object->id))->fetchField();
  if ($bundle_info->sync_drupal_timing == 'real_time') {
    module_load_include('inc', 'islandora_sync', 'includes/import_to_drupal');

    //@TODO: should objects that haven't been synced at all be created?
    islandora_sync_import_from_pid($object->id, $bundle_info->bundle, $nid);
  }
  else {
    $queue['pid'] = $object->id;
    $queue['type'] = $bundle_info->entity_type;
    $queue['bundle'] = $bundle_info->bundle;
    $queue['entity_id'] = $nid;
    $queue['operation'] = 'update_drupal';
    //@TODO: limit queue to 1 op/object
    drupal_write_record('islandora_sync_queue', $queue);
  }
}

/**
 * Implements hook_cron().
 */
function islandora_sync_cron() {
  module_load_include('inc', 'islandora_sync', 'includes/import_to_drupal');
  module_load_include('inc', 'islandora_sync', 'includes/export_to_fedora');
  $queue_items = db_query("SELECT * FROM {islandora_sync_queue} WHERE processed_time IS NULL ORDER BY id ASC")->fetchALL();
  foreach ($queue_items as $item) {
    switch ($item->operation) {
      case 'sync_drupal':
        islandora_sync_import_from_pid($item->pid, $item->bundle);
        break;

      case 'sync_fedora':
        $node = node_load($item->entity_id);
        $type_info = islandora_sync_bundle_settings($item->bundle);
        islandora_sync_export_from_node($node, $type_info);
        break;

      case 'update_drupal':
        islandora_sync_import_from_pid($item->pid, $item->bundle, $item->entity_id);
        break;

    }

    // Should check for success.
    $item->processed_time = time();
    drupal_write_record('islandora_sync_queue', $item, 'id');
  }
}

/**
 * Implements hook_node_insert().
 */
function islandora_sync_node_insert($node) {
  $type_info = islandora_sync_bundle_settings($node->type);

  if (isset($type_info->id) && $type_info->sync_fedora && $type_info->sync_fedora_create) {
    if ($type_info->sync_fedora_timing == 'real_time') {
      module_load_include('inc', 'islandora_sync', 'includes/export_to_fedora');
      islandora_sync_export_from_node($node, $type_info);
    }
    else {
      $queue['type'] = $type_info->entity_type;
      $queue['bundle'] = $type_info->bundle;
      $queue['entity_id'] = $node->nid;
      $queue['operation'] = 'sync_fedora';
      drupal_write_record('islandora_sync_queue', $queue);
    }
  }

}

/**
 * Implements hook_node_update().
 */
function islandora_sync_node_update($node) {

}

/**
 * Implements hook_module_implements_alter().
 */
function islandora_sync_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'form_field_ui_field_overview_form_alter' || $hook == 'form_alter') && isset($implementations['islandora_sync'])) {
    $group = $implementations['islandora_sync'];
    unset($implementations['islandora_sync']);
    $implementations['islandora_sync'] = $group;
  }
}

/**
 * Implements hook_form_field_ui_field_overview_form_alter().
 */
function islandora_sync_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  $form['fields']['#header'][6]['colspan'] = 3;  //@TODO: don't hardcode
  foreach ($form['fields'] as $field_name => $values) {
    $row_types = array('field', 'extra_field', 'group');  //@TODO: must be a better way
    if (isset($values['#row_type']) && in_array($values['#row_type'], $row_types)) {
      $form['fields'][$field_name]['fedora'] = array(
        '#type' => 'link',
        '#title' => t('fedora'),
        '#href' => 'admin/structure/types/manage/' . $form['#bundle'] . '/fields/' . $field_name . '/fedora',
        '#options' => array('attributes' => array('title' => t('Manage Fedora Commons mappings.'))),
      );
    }
    elseif ($field_name[0] != '#') {
      $form['fields'][$field_name]['fedora'] = array('#markup' => '');
    }
  }
}

/**
 * Implements hook_features_api().
 */
function islandora_sync_features_api() {
  return array(
    'field_datastreams' => array(
      'name' => t('Field to Fedora mappings'),
      'file' => drupal_get_path('module', 'islandora_sync') . '/includes/features.inc',
      'default_file' => FEATURES_DEFAULTS_INCLUDED_COMMON,
      'feature_source' => TRUE,
    ),
    'islandora_sync_bundle_settings' => array(
      'name' => t('Islandora Sync content type settings'),
      'file' => drupal_get_path('module', 'islandora_sync') . 'includes/features.inc',
      'default_file' => FEATURES_DEFAULTS_INCLUDED_COMMON,
      'feature_source' => TRUE,
    )
  );
}

function islandora_sync_get_content_models() {
  module_load_include('inc', 'islandora', 'includes/tuque');

  $connection = new IslandoraTuque();

  $query = 'select $object  $model from <#ri>
    where (walk($model <fedora-model:hasModel><info:fedora/fedora-system:ContentModel-3.0>
    and $model <fedora-model:hasModel> $object))
    minus $object <mulgara:is><info:fedora/fedora-system:FedoraObject-3.0>
    minus $object <mulgara:is><info:fedora/fedora-system:ContentModel-3.0>
    minus $object <mulgara:is><info:fedora/fedora-system:ServiceDefinition-3.0>
    minus $object <mulgara:is><info:fedora/fedora-system:ServiceDeployment-3.0>
    order by $object';

  $results = $connection->repository->ri->itqlQuery($query);

  $content_models = array();
  foreach ($results as $model) {
    $content_models[] = $model['object']['value'];
  }
  $content_models = array_unique($content_models);
  $content_models = array_values($content_models);

  return $content_models;
}

function islandora_sync_get_bundle_cmodels($bundle) {
  $cmodels = db_query("SELECT cmodel FROM {islandora_sync_type_cmodel} WHERE bundle = :bundle",
    array(':bundle' => $bundle)
  )->fetchCol();
  return $cmodels;
}

function islandora_sync_bundle_settings($bundle) {
  $settings = db_query("SELECT * FROM {islandora_sync_type_settings} WHERE entity_type = 'node' AND bundle = :bundle",
    array(':bundle' => $bundle)
  )->fetchObject();
  return $settings;
}

function islandora_sync_field_settings($type, $field) {
  $settings = db_query("SELECT * FROM {islandora_sync_fields} WHERE bundle = :bundle AND field = :field",
    array(':bundle' => $type, ':field' => $field)
  )->fetchAll();
  return $settings;
}
